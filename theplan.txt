
http://www.ci.tuwien.ac.at/Conferences/DSC-2003/Proceedings/MurrellHornik.pdf

- ImageMagick
  + compare

http://r-forge.r-project.org/

- register
- Paul will "add" to graphicsqc
- upload ssh keys
- svn checkout svn+ssh://sgar@svn.r-forge.r-project.org/svnroot/graphicsqc


http://cran.r-project.org/doc/manuals/R-exts.html




# 24/01/08

- improve evalPlotCode() so that errors and warnings are captured.
- plotFun() should make multiple calls to plotExpr() with 
  different prefix for each fun (prefix defaults to fun name).  
  Ditto plotFile().
- dev.off() in plotExpr() ?  Why not ???
- empty files;  in plotExpr(); create (temporary) blanks 
  (unless they already exist), 
  if only one file is generated, check its size against appropriate 
  blank and remove if match.

# 25/01/08

- focus on plotFun() THEN compare()  (for both plotExpr and plotFun)

- DESIGN:

plotExpr() produces qcResult plus log file

plotFun() produces qcFunResult plus funLog file
- qcFunResult is a list of qcResults
- funLog file just names appropriate log files, plus maybe info

compare() only compares two things of the same class

compare() produces qcCompare plus compareLog file OR
                   qcFunCompare plus compareFunLog file 

compare() autodetects funLog files first then log files
  if no funLog files exist

compare() produces qcCompareList plus compareListLog file
  if it autodetects multiple log/funLog files

someday, the report code has to handle qcCompare/compareLog OR
                                       qcFunCompare/compareFunLog OR
                                       qcCompareList/compareListLog
  (OR several of these via autodetect !)
 
# 31/01/08

- use a closure for the global in evalPlotCode()

- also use a closure in, e.g., plotFun(), to pass in to 
  plotExpr() to use as warning handler so that warnings
  only occur once.

- replace mapply() with loop (in plotFunction [et al?])


# 07/02/08

- use file.info() for getting file sizes.

- see source code of embedFonts() for example of how to make
  cross-platform system() calls.

- more design:

  compare() finds out what sort of things it is comparing, then
  calls a compareExpr() or compareFun(), etc.  compareFun(), etc
  call compareExpr() multiple times, wrap up the results (in a
  "compareFun" object?) and return.

# 21/02/08

- use file.path()

- check path (for NULL) in plotFunction()

- add some calls to notYetImplemented()

- compare() (already) has to cope with possibly a list of qcPlotExprResults
  because that might result from, e.g., test="path".

  It should also allow list of qcPlot*Results via, e.g., 
  test=c("barplot-log.xml", "grid-pkg-log.xml"), or even,
  test=list(testResult1, testResult2)

- readLog() needs the path to be passed in too.

# 21/07/08

- start a test battery to check what's working
  + plotExpr(), plotFun(), ...
  + compare(plotExpr(), ...) 
    - from "result" and from XML
  + see Writing R Extensions
  + create a pkg/tests/ dir

- complete plotFile() 
  + needs to write XML 

- expand compare() to cope with wider variety of results.
  + write XML log files

- readLog() needs the path to be passed in too.


# 24/07/08

- XML log for plotFunction does NOT need FULL path to individual 

- reminder: log files (esp. from plotExpr()) do NOT record the 
  actual code they ran because that code may be HUGE.

- GNUdiff() should save the output from diff (i.e., the actual
  (text) differences between files (for text-based formats).

- use mapply(..., SIMPLIFY=FALSE) in compare so ALWAYS get a list result.

- check Writing R Extensions AND R-forge docs for how to 
  R CMD check an R-forge package.
  + try adding DESCRIPTION file

  
# 31/07/08

- use recent grid.ls() change (to fix the case where there are 
  NULLs in the display list) as test case for graphicsqc ?

- read "Documenting programs" in "Writing R Extensions"
  and (probably) start a NEWS file and a ChangeLog file
  to track/document changes.

- the files "Rfile.txt" and "Rfile2.txt" should go in 
  tests/ sub-dir OR inst/files/ or somesuch.
  If the latter, use system.file() to find them.
  Then rename them with .R suffix.

- evalPlotCode() should check for 'expr' being a language
  object and, if it is, just do eval(expr)

- plotFunction() could check for 'fun' being NOT character
  and, if so, fun <- deparse(substitute(fun))
  (just to handle the case where the USER types 'plotFunction(plot)'
   instead of plotFunction("plot"))

- plotFun() and plotFile() should probably ALWAYS return a
  'plotFunResult' or 'plotFileResult', even when that may
  only contain a single 'plotExprResult' BECAUSE that should
  make the code that has to work with results (e.g., compare()
  and any report generating code) MUCH simpler.


# 07/08/08

- MAKE a ChangeLog file

- default prefix for plotFunction():
  use (as.character() of) only FIRST function name.
  (put a NOTE about this in the help file!!)

- WORRY about the fact that if we stop() in the middle of
  one of our functions, then we may leave a complete mess
  in a directory with no way to clean it up (other than
  delete EVERYTHING).

  What can we do about this ?
  
  A wish-plan:

  - plot*() only fails BEFORE it creates any files (in which   
    case there is nothing to clean up) or AFTER it has 
    created everything (in which case it removes all files that
    it created).

    That would require checking where all stop()s are, and
    adding code to do the back-out (deletion) for stop()s
    that are AFTER files have been created (and removing any 
    stop()s that occur in the middle of creating files!!!).

  - delete any directories that are empty once we have removed
    all our files.

  - more complicated for functions above plotExpr() because, e.g.,
    one plotExpr() may work, then the next plotExpr() fails.
    The second plotExpr() can clean up after itself, BUT the 
    function calling plotExpr() needs to know about the failure
    so that it can clean up the first plotExpr()!

    Possible solutions to this are: exception-handling (all higher
    functions do something like a tryCatch(plotExpr(...));
    replace all stop()s with warning()s and return a FALSE result
    if plotExpr() fails !?
    
  Stephen's alternative plan:

  - just run the code again with clear=TRUE !

    Nice because it's simpler, but only works if, when we get
    an error, we want to FORCE our original attempt to work.

    If, when we get an error, we want to BAIL OUT on our original
    attempt, this does not give us what we want.

- MUST put warning in documentation NOT to send plotExpr() any
  code that opens a graphics device (especially if it does not
  also CLOSE that device).

- plotFile() should (ALWAYS) produce qcPlotFileResult and write
  fileLog file.

- make compare() return different class of result for different 
  comparisons, e.g., qcCompareExprResult vs. qcCompareFunResult,
  AND create XML log files.

- add a tests/tests.Rout.save

# 12/08/08

- use anisotropy change to engine.c as example of change that
  might only affect some formats (e.g., X11, but not PDF).
  (revision 44417)

