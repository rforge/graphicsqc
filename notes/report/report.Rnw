\documentclass[a4paper]{report}
\usepackage[left=3.95cm, right=3.95cm, top=4.9cm, bottom=4.9cm]{geometry}
\usepackage{natbib}
\bibpunct{(}{)}{;}{a}{,}{,}

\renewcommand\bibname{References}
\newcommand{\R}{\textsf{R}{}}
\newcommand{\graphicsqc}{\textbf{graphicsQC}{}}
\SweaveOpts{keep.source=TRUE}

\title{\textbf{The \graphicsqc{} package}\\
  Quality Control for Graphics in \R{}}
\author{Stephen Gardiner\\\\Supervised by Dr.\ Paul Murrell\\[2cm]
  Department Of Statistics\\
  University of Auckland\\
  BSc(Hons) Project}
\date{November 2008}

\begin{document}
\maketitle
\begin{abstract}
  The \textbf{graphicsqc} package is a new \R{} package developed for
  extending Quality Control for Graphics in \R{}. It is capable of
  evaluating arbitrary code to produce plots in different file
  formats, while recording information about them. Sets of these plots
  are then able to be compared, with plots of differences produced
  (when available). Lastly, information about these comparisons are
  produced in a HTML report.
\end{abstract}
\tableofcontents

<<echo=FALSE, results=hide>>=
require(graphicsQC)
require(Sxslt)
options(width=60, continue="  ")
@
\chapter{Introduction}
There has been much work into the concept of Quality Control for
software[cite SWEBOK (ch11)?]. There are currently tools in \R{} which
ensure that \R{} code will run without catastrophic failure, but fewer
tools to check that the output from the code is correct, especially
graphics output. Thus, the aim of this research has been to establish
new methods of ensuring Quality Control for graphics in \R{}. The
\graphicsqc{} package has been created for this, and this report aims
to describe how the package works, some features of it, and the
reasoning behind some of the design choices.

In Chapter~\ref{chap:plot}, the process of how plots are created and
the steps taken to record the plots and related information is
described.

Chapter~\ref{chap:compare} describes how the comparison between sets
of plots is performed and some extra features the package provides for this.

Chapter~\ref{chap:report} explains the transformation from log file to report.

\section{Measuring software quality: QC and Regression testing}
Quality Control (QC), or \emph{testing}, is used to ensure quality of
the output of software (as opposed to Quality Assurance (QA) which is
involved with ensuring the correctness of the \emph{process} producing
the output). It is focused on ensuring that the software does not
produce any errors (\emph{crash}), and produces the correct
output. Specifically, QC is useful for the detection of problems
(\emph{bugs}). In terms of graphics, assessing the correctness of
output cannot (initially) be determined without the use of an `expert
observer'. The process of testing whether output is correct or not
will be referred to as \emph{validation}.

Once we have an initial, correct output, we can test future outputs
against this initial output. This type of testing is known as
\emph{regression testing}. The initial output is referred to as
\emph{control output}. After this, changes to the source code of the
software can be made, and the output produced again. This second set
of output is referred to as \emph{test output}. By comparing this test
output against the control output, we can identify if there has been
any change in the output. If there are no differences between the two,
we can validate the test output as being correct. If a change is
expected, then an expert observer is required to assess whether only
the changes which were expected occurred, and are correct. If this is
the case, the test output now becomes the control output for future
testing.  \citep{ihagen96} and \citep{Rext08} and \citep{murhor03}.

\section{Existing QC functions in \R{}}
There are currently a variety of methods used for quality control in
\R{}[cite hornik?]. When writing packages, there is a \texttt{R CMD
  check} command which will perform a multitude of quality control
tests on a package. Among these tests are checks of the output
produced by the code. Any example code contained in the
documentation of the package is run to ensure that it does not crash
or produce any errors. If a ``tests'' directory exists within the
package, it will evaluate the code in any \texttt{.R} files in the
directory, making sure that they do not produce any errors or crash,
and then compare the output to corresponding \texttt{.Rout.save} files
if they exist. Lastly, it will run code in any package vignettes if
they exist, to test that the code will not crash or produce any
errors. This testing can be manually performed on any package at any
time, however this process is also commonly automated. Examples of
this exist on both the CRAN (The Comprehensive R Archive Network) and
R-Forge websites, which both offer nightly checks and builds of the
packages they host.

% I assume a lot here...
At \R{}'s core, there are also some hard-coded regression tests which
can be run from a `source' distribution of \R{} via the \texttt{make
  check} command. These mainly consist of testing core elements, such
as arithmetic tests, random number generation tests, and so on. They
generally consist of a \texttt{.R} file containing test code to be
evaluated, with a corresponding \texttt{.Rout.save} file which
contains model output. There are however some graphics regression
tests which are also run. These involve running \R{} code which will
open a PostScript device and run code which will produce some plots,
and then use the GNU \texttt{diff} utility to compare the plots to
some supplied model \texttt{.ps.save} plots. This facility is
hard-coded into \texttt{make check} and is not performed by \texttt{R
  CMD check}. Thus the current level of quality control for graphics
in \R{} is very limited and is available only for a few pre-defined
plots, and only when using a source distribution of \R{}.
% Cran also does nightly `make checks' of R?

% Hmm: Diff is assumed to be available on supported platforms,
% when R gets built does it need diff to compare the .ps.save files?
% Does it actually compare them? I tried a test for a package and
% R CMD check doesn't do it.

% Kurt Hornik will eventually summarise QC in R (at 2003)?
% https://stat.ethz.ch/pipermail/r-sig-qa/2003-May/000005.html?


\section{An early attempt at QC for graphics in \R{}}
An early attempt at graphics testing for \R{} is a package similarly
named \graphicsqc{} written by Paul Murrell \citeyearpar{murhor03}. It
was essentially a proof-of-concept package, and is very limited in
usability and functionality. It is limited to only running regression
tests on the example code in given functions in \R{}. It does not
record or return any information pertaining to the plots (such as
which directory the plots are being stored), and names plots according
to the function that created them, so if users wish to compare two
similar functions with different names, they must be careful in their
naming of directory (with no error checking if files get
overwritten). For most of the supported file formats, if any
differences were detected, a vector naming the test files with
differences were returned, with no other information. For the files in
the \texttt{pbm} format, an \texttt{xor} operation was perfomed on the
plots and a difference plot produced which gives a visual
representation of the differences between the plots.

Due to these limitations, the package required a complete re-write to
become more useful. Some features necessitating this are the ability
to record information relating to the plots, such as which plots were
created in which directory, which call created the plots, and so
on. Another necessary feature is the ability to plot any arbitrary
expressions, which can then be extended to plotting files and also
examples from functions. As this occurs, it would also be useful to
appropriately record any warnings which occur, and then possibly
difference these as they may be useful for discovering why plots
differ. The current \graphicsqc{} package is a complete re-write of
this previous implementation.

\section{Outline of \textbf{graphicsqc}}
The nature of what's required of the package reflects well with its
design. The first component of regression testing involves creating
model output. This is accomplished by one of the three functions
\texttt{plotExpr()}, \texttt{plotFile()} and
\texttt{plotFunction()}. These evaluate and plot arbitrary
expressions, code within files, and example code from functions
respectively. They also record information about the plots they
produce, including any warnings or errors which may have
occurred. These functions are used for creation of both the model and
test output and are further described in Chapter~\ref{chap:plot}.

Once the model and test output have been created, we need to compare
them for differences. For this, there is the \texttt{compare()}
function. The \texttt{compare()} function will compare two sets of
plots, for example two sets produced by \texttt{plotFunction()}. It
can compare using the \R{} objects of the logs, or paths to the
resulting logs, or a mixture of these. It uses the GNU \texttt{diff}
utility to do the comparisons, which can be assumed on all of \R{}'s
supported platforms[cite RF?]. It compares the plots and any warnings
or errors for differences and then records the result of the
comparison. The \texttt{compare()} function is further described in
Chapter~\ref{chap:compare}.

Lastly, we may wish to report about the plots and the comparisons. The
function \texttt{writeReport()} is used for
this. \texttt{writeReport()} generates a HTML page of the results of
any plotting or comparison result. It is further discussed in
Chapter~\ref{compare}.

\chapter{Plotting Arbitrary Expressions}
\label{chap:plot}
\section{Plotting expressions}
In order to test the correctness of output, it follows that output
must have initially been produced. For this task, the function
\texttt{plotExpr()} was created. The main concept behind
\texttt{plotExpr()} is to evaluate plotting code and record which
plots were produced and related information. It does this by initially
error checking it's arguments, and then making a call to a function
within the namespace, \texttt{evalPlotCode()}.

\texttt{evalPlotCode()} is reponsible for evaluating code after
opening an appropriate graphics device. It uses the \texttt{tryCatch}
mechanism in \R{} to ensure that the function can continue evaluation
if there is an error in the code being evaluated. With the use of
calling handlers, it is also able to `catch' warnings and store
them. If an error is encountered, this is also recorded and evaluation
of the current set of expressions is stopped. This is intentional
because an error in the code is likely to be something serious which
will affect future expressions in the current set and possibly
plots. Warnings however are not considered to be stop-worthy, so
evaluation will continue after recording the warning.

The creation of XML logs is further discussed in section~\ref{sec:logs}

Using error handling functions in \R{},
\texttt{plotExpr} was designed to be able to produce the output from
any arbitrary code passed to it as an argument, with the ability to
note and safely recover from any warnings and to also correctly stop
on any errors.

- uses lapply over filetype (set up so warnings keep running and
blocks stop at the correct time. This leads on to how the log is
written).

-- blank images.
=====unedited old stuff====
As arbitrary code is accepted by the function it can be
easily seen that plotting the code from files, functions, or even
packages in \R{} is possible, and thus the convenience functions
plotFile, and plotFun were also created.

The output produced from a plotting function would simply be a series
of plots which the code might (or might not) have produced. In order
to store these plots, a file format (or file formats) must be chosen
and given as an argument to the function. Using many file formats is a
distinct advantage in that all graphics formats can be tested against
themselves to help identify whether changes in graphics output are due
to the underlying code used to produce the respective graphics, or
whether there is a problem or change with a specific graphics driver.

\noindent For example, we might wish to create plots of the
\texttt{plot} function. In \R{}:

\begin{verbatim}
> plotFunction("plot", filetype=c("png", "pdf"), path="plotControl")
\end{verbatim}
Then to view the files created in the directory:
\begin{verbatim}
$ ls plotControl/
plot-1.pdf  plot-2.pdf  plot-3.pdf  plot-4.pdf  plot-funLog.xml
plot-1.png  plot-2.png  plot-3.png  plot-4.png  plot-log.xml
\end{verbatim}
As we can see, files from the \texttt{plot} function's example code
have been produced, where each file has the prefix of the function
name, and a numbered suffix to identify it. Also, as specified, pdf
and png files have been produced, along with two xml files;
\texttt{plot-log.xml} and \texttt{plot-funLog.xml}. The creation of
the XML files is described in the next section.
\section{Plotting files and functions}
- multiple calls to plotExpr.
\section{Logs of plots created}
\label{section:logs}
- logs had to be made, hooks don't guarantee a (new) plot?, have to search
for plots after they're made
\subsection{The XML Language}
- extensible, self-documenting, platform independent etc.

As we will want to compare the plots to previously produced plots, we
will need to know information about each set of plots which has been
produced. Information about the plots produced are stored in an
e\textbf{X}tensible \textbf{M}arkup \textbf{L}anguage file. The main
advantages of storing this information in XML is that it is
self-documenting and also platform independent.

\subsection{XML logging}
- show how it's done (split info and main?) - and plotFile and plotFun
since they've now been explained?. process can now be taken out of
R. freedom of choice.

 It is relatively
human-legible, and since it is self-documenting, the process at this
point can be taken out of \R{} and the plots and corresponding
information used by other programs if desired.

\noindent Continuing the example in 3.1, the log file produced is shown:
\begin{verbatim}
$ cat plotControl/plot-log.xml
<?xml version="1.0"?>
<qcPlotExprResult>
 <info>
  <OS>unix</OS>
  <Rver>2.6.1</Rver>
  <date>Sat Feb 23 11:32:49 2008</date>
  <call>
   <![CDATA[
   plotFunction("plot", filetype = c("png", "pdf"), path = "plotControl")   ]]>
  </call>
  <filetype>png</filetype>
  <filetype>pdf</filetype>
  <directory>/home/stephen/plotControl</directory>
 </info>
 <warnings/>
 <errors/>
 <filenames>
  <filename>plot-1.pdf</filename>
  <filename>plot-1.png</filename>
  <filename>plot-2.pdf</filename>
  <filename>plot-2.png</filename>
  <filename>plot-3.pdf</filename>
  <filename>plot-3.png</filename>
  <filename>plot-4.pdf</filename>
  <filename>plot-4.png</filename>
 </filenames>
</qcPlotExprResult>
\end{verbatim}
As XML is self-documenting, the log file produced does not require
much explanation. The \texttt{funLog} file is simply a pointer to all
of the log files that the function might have produced for ease of
comparison later.

\section{Example: Plotting functions in the \texttt{grid} package}
- ls("package:grid") (of course, don't show everything, cut some off
  and leave \ldots)
\chapter{Comparing plots}
\label{chap:compare}
- GNU diff/ImageMagick are used. Diff plots only made when a diff is
detected, however not made when they are going to be erased afterwards
(although erase doesn't fully work yet)?
\section{Comparing sets of expressions}
\subsection{Text Based vs. Bitmap Formats}

- explanation. 3 file formats currently supported (mention this
earlier?). can use xor to create plots for bitmaps? .diff files only
make sense for text based. advantages and disadvantages for both?

\subsection{Pairing plots}
- how logs are paired? unpaired.

The next step in the process is to compare a set of plots to another;
typically between two different versions of \R{} to establish if the
graphics outputs have changed, but could also be used to detect
whether changes made to the graphics system or to specific functions
are different to previously known correct control group outputs.

GNU diff is used.

To detect the differences, the utility \texttt{diff} is used, which is
assumed on all supported platforms according to the \R{} Coding
Standards (Writing \R{} Extensions). An extension to this has been to use
the ImageMagick software to also create plots of the differences when
available. A drawback to this is that the ImageMagick software must
first be installed, but it is open-source, free, and is readily
available for many operating systems or even from source. While it is
a distinct advantage to use the ImageMagick software, it is also not a
requirement as the differences will still be detected by
\texttt{diff}, but plots of the differences will not be created.

\noindent For example, to create two plots which will be different
from each other:
\begin{verbatim}
> control <- plotExpr("hist(rep(1:10,1:10), breaks=6)", "png", "histControl")
> test <- plotExpr("hist(rep(10:1,1:10), breaks=6)", "png", "histTest")
> compare(test, control, erase="none")
\end{verbatim}

\noindent Which informs us that the plots are indeed different:
\begin{verbatim}
/home/stephen/histControl-1.png
                    "different"
\end{verbatim}

\noindent And an appropriate plot of the differences is also produced,
with the differences highlighted in red:

%\begin{center}
%\includegraphics[width=9cm]{diffplot.png}
%\end{center}

While this was a trivial example of a single expression, the ability
to compare example code from entire functions has also been
implemented, with lists of the identical and different files and
corresponding plots of the differences produced and also the ability
to handle extreme cases such as when new plots have been added in the
test group which don't have a corresponding pair in the control group.

\section{Comparing sets of files and functions}
\section{Auto-detection of logs} % plot AND compare logs
- One of the features.. easier for users (especially when comparing in
separate versions of \R{} and having to find the exact file name).
\section{Extensibility for new file formats}

- use of mapply in compareType nested in lapply in compareExpr (give
some gory details!?) - allows for compareNEWTYPE where the function
will get automatically called with the new filetype (plus would need
to include the filetype in the 'valid filetypes' list).

\section{Example: Comparing the \texttt{grid} functions}
- maybe show the print.qcCompareExpr result for one of the functions
(even though it doesn't fully work..)?

\chapter{Reporting}
\label{chap:report}
\section{Transforming XML logs into HTML reports}
- logs are in xml, xslt seems the perfect choice (remember, this
option is left open for other users). some default style sheets are
provided, but are easily overwritten!
\subsection{The XSL Language}
- stylesheet language for xml. Define templates of how to display elements.
\section{Example: Reporting on the differences in \texttt{grid}}
- print screen from firefox? any better way? link to example on
http://graphicsqc.r-forge.r-project.org?
\chapter{Summary and conclusions}
something about summary...

- what's been done?
  + new package
  + plots stuff, compares stuff, pretty neat report
- what can be improved?
  + plot/compare/writeReport package
  + print<lots>
  + compare(erase)
  + DTDs for logs
  + completely unpaired fun/file
  + mac (XML doesn't work)? windows (Sxslt not ported to windows!)
                            few developers.

A powerful method of doing regression testing for graphics has been
implemented in \R{}. The current method consists of generating sets of
plots for the control and test groups, and then comparing them. It is
a major improvement on earlier work as it is now platform independent,
able to run any arbitrary code, and able to produce plots of
differences. It significantly improves the reliability and quality of
graphics testing in \R{}.

The current implementation still has much room for improvement. Using
the current implementation as a base, the package could be extended to
include a function to plot and compare entire packages, which will
simply be an extension of the current functions which plot and compare
other functions. A function to write a report (such as an HTML report)
based on the comparisons would also be a useful addition to the
package. Lastly a wrapper class to combine plotting, comparing, and
reporting into one step would be a clear finalisation of the package.

%\appendix
\clearpage
\addcontentsline{toc}{chapter}{Appendix A: Documentation}
%\renewcommand\thesection{Appendix \Alph{section}}
\chapter*{Documentation}
The latest version of the package can be installed from within \R{} via the
following command:
<<eval=FALSE>>=
install.packages("graphicsQC", repos="http://R-Forge.R-project.org")
@
Noting that the \textsf{XML} package is a dependency, so must also be
installed, and \textsf{Sxslt} must also be installed if \textsf{HTML}
reports are desired.

The latest version of the package can also be downloaded in unix directly from
the Subversion repository, when issuing a command such as:
\begin{verbatim}
svn checkout svn://svn.r-forge.r-project.org/svnroot/graphicsqc
\end{verbatim}
at the unix prompt.

To download the current revision at the time of printing (revision
??), the following command can be used:
\begin{verbatim}
svn checkout --revision ?? svn://svn.r-forge.r-project.org/svnroot/graphicsqc
\end{verbatim}

The rest of the in-R documentation follows...

\clearpage
\addcontentsline{toc}{chapter}{References}
\bibliographystyle{plainnat}
\bibliography{references}
% include references to XML and Sxslt from R News?

\end{document}
